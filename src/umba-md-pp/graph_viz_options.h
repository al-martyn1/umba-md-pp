#pragma once

#include "umba/umba.h"
#include "umba/filename.h"
#include "umba/filesys.h"
#include "umba/string_plus.h"
//
#include "utils.h"
//
#include "enums.h"
//
#include <string>



struct GraphVizOptions
{
    unsigned long            dpi   = 96 ; // -Gdpi=300    // --dot-dpi/ --gviz-dpi
    unsigned long            scale = 100; // 100%

    GraphVizTargetFormat     targetFormat = GraphVizTargetFormat::svg; // -Tsvg    // --dot-target-format=SVG/PNG  --gviz-target-format
    GraphType                graphType    = GraphType::dot; // type attribute, --gviz-graph-type - default graph type

    bool                     useFilenameAutogeneration = true;
    std::string              saveFilename = "graph";

    static inline
    unsigned long            autoGeneratedIndex = 0;

    std::string              savePath;

    std::string makeDotTargetFormatCliArgument() const
    {
        return escapeCommandLineArgument("-T" + enum_serialize(targetFormat));
    }

    std::string makeDotDpiCliArgument() const
    {
        return escapeCommandLineArgument("-Gdpi=" + std::to_string(getScaledDpi()));
    }

    bool generateCommandLine(std::string &tool, std::string &args, const std::string &inputDotFile, const std::string &outputImageFile) const
    {
        if (graphType==GraphType::dot)
        {
            // dot -Tsvg -s72 -o test001_72.svg test001.dot
            tool = "dot";
            args  = makeDotTargetFormatCliArgument();
            args += " " + makeDotDpiCliArgument();
            args += " -o " + escapeCommandLineArgument(outputImageFile);
            args += " " + escapeCommandLineArgument(inputDotFile);
            return true;
        }

        return false;
    }


    std::string getSavePath() const
    {
        if (savePath.empty())
            return umba::filesys::getCurrentDirectory<std::string>();

        if (!umba::filename::isAbsPath(savePath))
            return umba::filename::appendPath(umba::filesys::getCurrentDirectory<std::string>(), savePath);

        return savePath;
    }


    std::string generateOutputFilename() const
    {
        std::string name;

        if (useFilenameAutogeneration)
        {
            name = saveFilename + "_";
            std::string idxStr = std::to_string(autoGeneratedIndex++);
            std::size_t numZeros = idxStr.size()>=4u ? 0u : 4u-idxStr.size();
            name.append(std::string(numZeros, '0') + idxStr);
        }
        else
        {
            name = saveFilename;
        }

        // SVG не масштабируем при помощи DPI, выходит лажа - размер вроде тот же, а картинка больше, в итоге часть обрезается. SVG и так норм отображается
        if (targetFormat!=GraphVizTargetFormat::svg)
        {
            name.append("_");
            name.append(std::to_string(getScaledDpi()));
        }

        return umba::filename::appendPath(getSavePath(), umba::filename::appendExt(name, enum_serialize(targetFormat)));
    }

    std::string generateOutputTempFilename() const
    {
        return umba::filename::appendPath(getSavePath(), umba::filename::appendExt(std::string("$temp$"), enum_serialize(targetFormat)));
    }

    std::string generateInputDotTempFilename() const
    {
        return umba::filename::appendPath(getSavePath(), std::string("$temp$.dot"));
    }

    std::string generateHashFilename() const
    {
        return umba::filename::appendPath(getSavePath(), std::string("$gviz-hash$.txt"));
    }

    void setSaveFileName(const std::string &name)
    {
        useFilenameAutogeneration = false;
        saveFilename = name;
    }

    unsigned long getScaledDpi() const
    {
        // SVG не масштабируем при помощи DPI, выходит лажа - размер вроде тот же, а картинка больше, в итоге часть обрезается. SVG и так норм отображается
        if (targetFormat==GraphVizTargetFormat::svg)
            return 96;
        return dpi*scale / 100ul;
    }

    bool setDpi(const std::string &dpiStr) // --gviz-dpi
    {
        try
        {
            dpi = std::stoul(dpiStr);
            return true;
        }
        catch(...)
        {
            return false;
        }
    }

    bool setScale(std::string strScale)
    {
        try
        {
            if (umba::string_plus::ends_with_and_strip(strScale, ("%")))
            {
                umba::string_plus::trim(strScale);
                scale = std::stoul(strScale);
                return true;
            }
            else
            {
                auto dblScale = std::stod(strScale);
                if (dblScale<=0.0)
                    return false;
                scale = (unsigned long)(dblScale*100);
                return true;
            }
        }
        catch(...)
        {
            return false;
        }
    }

    bool setGraphType(const std::string &strGraphType)
    {
        auto tmp = enum_deserialize(strGraphType, GraphType::invalid);
        if (tmp==GraphType::invalid)
            return false;

        graphType = tmp;
        return true;
    }

    bool setTargetFormat(const std::string &strTargetFormat)
    {
        auto tmp = enum_deserialize(strTargetFormat, GraphVizTargetFormat::invalid);
        if (tmp==GraphVizTargetFormat::invalid)
            return false;

        targetFormat = tmp;
        return true;
    }


    // --dot-output-root/--dot-output-path
    // dot -Tsvg -Gdpi=300 -s96 -o test001_96.svg test001.dot



};




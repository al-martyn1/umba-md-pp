# Формат файла опций/ответов (response file)
# В одной строке - только одна опция
# Коментарии начинаются с символа '#' или символа ';'
# Коментарии допустимы только в начале строки

# Управляем предупреждениями и сообщениями
--warning=+all
--info=-all

# Устанавливаем русский как язык документов по умолчанию, если язык не задан мета-тэгами,
# не переопределён дефолтный язык где-то потом или не задан принудительно через опцию
# --force-document-language
# Задание языка необходимо для доксигена, если по дефолту задать не русский, или не задавать язык,
# доксиген кракозяблы генерит
# Если в документе задан метатег `Language`, то он переопределяет то, что задано из командной строки
# Если необходимо принудительно из командной строки задать язык документа,
# вне зависимости от содержимого метатегов документа, то следует использовать опцию командой строки
# --force-document-language
--document-language=russian

# Поиск внешних программ
# При поиске используемых внешних программ используются сведения об этих программах,
# которые оставляют в реестре установщики этих программ.
# Антивирусы могут возбуждаться на запросы к реестру к некоторым разделам.
# Данные опции запрещают это, но в таком случае данные программы должны быть прописаны в системной 
# переменной PATH
--dont-lookup-for-doxygen
--dont-lookup-for-graphviz

# Базовые опции
--processing-options=generate-toc,title,meta-data-subst
# fragment-number,
--set-insert-options=fail,path,filename-line-no,trim-arround,prototype-format=umba
--batch-page-index-file=doc/Index.md

# Базовые опции для Graphviz
--graphviz-output-format=svg
--graphviz-dpi=120
--graphviz-show-labels=true

# Расширения, обрабатываемые (и сканируемые) MDPP
--add-mdpp-extentions=_md,_md_,md_
--add-mdpp-extentions=_mkd,_mkd_,mkd_
--add-mdpp-extentions=_mdwn,_mdwn_,mdwn_
--add-mdpp-extentions=_mdown,_mdown_,mdown_
--add-mdpp-extentions=_mdtxt,_mdtxt_,mdtxt_
--add-mdpp-extentions=_mdtext,_mdtext_,mdtext_
--add-mdpp-extentions=_markdown,_markdown_,markdown_
#--add-mdpp-extentions=_text,_text_,text_

# Исключаем из сканирования в пакетном режиме подкаталоги со следующими именами.
# Будем называть это "голубятня", "чердак", "loft"
# В голубятне лежат не обрабатываемые в пакетном режиме файлы, предназначенные для подключения
# в файлы документов. Например, мы хотим создать книгу, и публиковать её как отдельные документы,
# так и как книга в сборе. Тогда мы создаём в голубятне главы книги, а в обрабатываемом каталоге
# аналогичные файлы, единственное действие в которых - подключение соответствующих файлов из голубятни.
# Также в обрабатываемом каталоге мы создаём файл TheBook.md_, в который подключаем все главы
# из голубятни, для сборки всех глав в единый документ.
# Также библиотеки/модули могут содержать свою голубятню, в которой хранятся различные документы,
# включаемые как в документацию по данной библиотеке/модулю, но также и предназначенне для включения
# в конечную документацию по продукту, который создаёт пользователь библиотеки/модуля.
--batch-exclude-dirs=_md,_md_,md_
--batch-exclude-dirs=_mkd,_mkd_,mkd_
--batch-exclude-dirs=_mdwn,_mdwn_,mdwn_
--batch-exclude-dirs=_mdown,_mdown_,mdown_
--batch-exclude-dirs=_mdtxt,_mdtxt_,mdtxt_
--batch-exclude-dirs=_mdtext,_mdtext_,mdtext_
--batch-exclude-dirs=_markdown,_markdown_,markdown_
--batch-exclude-dirs=doc.dox,doc.doxy,doc.doxygen,.dox,.doxy,.doxygen,dox,doxy,doxygen
#--batch-exclude-dirs=_text,_text_,text_

--batch-exclude-dir=.out,.build,.git,.bat,.cmake,.msvc,.vscode,.vs,.config


# При генерации вьювером название файла задается на основании заголовка (из тэгов или первого заголовка, 
# или из первых строк) документа
# Но мы придерживаемся идеи не использовать русские имена без крайней необходимости
--processing-options=transliterate-generated-filenames
# --processing-options=no-transliterate-generated-filenames

# Ошибки и опечатки в именах тэгов, а также поддержа русскоязычных тэгов
# Тэги в секции метаданных могут указываться на английском и русском языке, а также во множественном числе,
# например:
# Author, Authors, Автор, Авторы
# Имя тэга транслитерируется, потом приводится к нижнему регистру, после этого начинают работу правила 
# 'meta-tag-replace' для приведения имён тэгов к каноническому виду.
--meta-tag-replace=avtor:author
--meta-tag-replace=avtory:author
--meta-tag-replace=authors:author
--meta-tag-replace=tegi:tags
--meta-tag-replace=teg:tags
--meta-tag-replace=data:date
--meta-tag-replace=zagolovok:title
--meta-tag-replace=nazvanie:title
--meta-tag-replace=caption:title
--meta-tag-replace=kategorii:category
--meta-tag-replace=kategoriya:category
--meta-tag-replace=categories:category
--meta-tag-replace=opisanie:description
--meta-tag-replace=otmazka:disclaimer
--meta-tag-replace=otmazki:disclaimer
--meta-tag-replace=disclaimers:disclaimer
--meta-tag-replace=versiya:version
--meta-tag-replace=yazyk:language
--meta-tag-replace=yazyk dokumenta:language
--meta-tag-replace=otkaz ot otvetstvennosti:disclaimer
--meta-tag-replace=generators:generator
--meta-tag-replace=brief:description
--meta-tag-replace=briefs:description

# Сериализация метатегов
# Метатеги исходного документа могут сохраняться в результирующий документ в секцию метатэгов
# Тут задаются правила сериализации канонических имён метатегов
--meta-tag-serialize=title:Title
--meta-tag-serialize=disclaimer:Disclaimer
--meta-tag-serialize=description:Description
--meta-tag-serialize=author:Author
--meta-tag-serialize=category:Category
--meta-tag-serialize=date:Date
--meta-tag-serialize=tags:Tags
--meta-tag-serialize=version:Version
--meta-tag-serialize=language:Language
--meta-tag-serialize=url:URL
--meta-tag-serialize=generator:Generator
--meta-tag-serialize=brief:Brief

# Типы метатегов
# Метатеги в результирующий документ собираются из всех включенных документов,
# а также из внешних диаграмм graphviz и PlantUML
# Метатеги записываются в формате YAML, но есть исключения. Так, списки, например, список авторов
# в каноническом виде должен быть записан так:
# ```
# Author:
#   - Name1 <address1@domain.net>
#   - Name2 <address2@domain.com>
# ```
# 
# Но для упрощения список авторов может быть записан и через запятую:
# ```
# Author: Name1 <address1@domain.net>, Name2 <address2@domain.com>
# ```
# При этом автор(ы) основного документа будут идти первыми, а авторы использованных поддокументов
# идут в порядке подключения поддокументов и их порядка там (не зависит от способа оформления метатега).
# Для этого мы устанавливаем тип тэга как comma-unique-list - список, однострочное значение разделяется 
# запятой, без повторяющихся значений.
# 
# Возможные значения:
# 
# root-only - текст, используется только значение из корневого элемента.
# 
# text-first - текст, используется только первое значение.
# 
# text-replace, text-last - текст, используется только последнее значение.
# 
# text, text-merge - текст, используется всё найденное, вставляется группой параграфов.
# 
# list - список значений, доступная форма записи - только в виде списка YAML.
# 
# unique-list - список значений, аналогично list.
#               В отличие от list, повторяющиеся значения удаляются.
# 
# comma-list - список значений, в виде списка YAML или одной строкой, со значениями, разделяемыми запятой.
#              Порядок - по мере обнаружения тэгов.
# 
# comma-unique-list, unique-comma-list - список значений, в виде списка YAML или одной строкой, со значениями,
#              разделяемыми запятой. В отличие от comma-list, повторяющиеся значения удаляются.
# 
# set - набор уникальных значений, отсортированных лексикографически.
#             Доступная форма записи - только в виде списка YAML.
#             При сортировке не учитываются национальные особенности.
# 
# comma-set - аналогично set, но значения могут быть заданы одной строкой, через запятую.
# 
# При генерации результирующего документа метатеги форматируются в строки в формате YAML
# 
# !!! Не стоит менять базовые настройки, рекомендуется только дополнять их для своих метатегов
# 
--meta-tag-set-type=comma-set:category,tags
--meta-tag-set-type=comma-unique-list:author
--meta-tag-set-type=text-first:title,date
--meta-tag-set-type=root-only:url
--meta-tag-set-type=text-merge:disclaimer,description,generator
#,brief

# Настройки для листингов различных языков программирования
# Также используются для извлечения фрагментов кода из исходных текстов

# C++
# Решётка используется препроцессором и всякими прагмами
# Но вообще надо подумать, чтобы отдельно бэктрейс по сниппету стопорился по отдельным сепараторам
--add-code-file-extentions=C++:.cpp,.cxx,.c++,.cc,.h,.hpp,.h++,.ixx,.i++,.i
--set-code-case-sens==C++:true
--add-code-comment-marker=C++://
--add-code-comment-marker=C++:/*|*/
--add-code-cut-prefix=C++://#!
--add-code-cut-prefix=C++://#$
--add-code-cut-prefix=C++:/*#!
--add-code-cut-prefix=C++:/*#$
--add-code-separator-prefix=C++:#
--add-code-separator-prefix=C++://---
--add-code-separator-prefix=C++:/***
--set-code-block-chars=C++:{}
--set-code-statement-separator=C++:;
--set-code-assign-operator=C++:=
--set-code-prototype-remove=C++:inline
--set-code-listing-tag=C++:cpp
--set-code-processing-handler=C++:fn-prototype-extract:cc-fn-ptt-extract
--set-code-processing-handler=C++:cls-prototype-extract:cc-cls-ptt-extract
--set-code-processing-handler=C++:fn-prototype-format:cc-fn-ptt-format
--set-code-processing-handler=C++:cls-prototype-format:cc-cls-ptt-format

# C
--add-code-file-extentions=C:.c
--set-code-case-sens==C:true
--add-code-comment-marker=C://
--add-code-comment-marker=C:/*|*/
--add-code-cut-prefix=C://#!
--add-code-cut-prefix=C://#$
--add-code-cut-prefix=C:/*#!
--add-code-cut-prefix=C:/*#$
--add-code-separator-prefix=C:#
--add-code-separator-prefix=C://---
--add-code-separator-prefix=C:/***
--set-code-block-chars=C:{}
--set-code-statement-separator=C:;
--set-code-assign-operator=C:=
--set-code-prototype-remove=C:inline
--set-code-listing-tag=C:c

# Squrrel
--add-code-file-extentions=Squrrel:.nut,.nuts
--set-code-case-sens==Squrrel:true
--add-code-comment-marker=Squrrel://
--add-code-cut-prefix=Squrrel://#!
--add-code-cut-prefix=Squrrel://#$
--add-code-separator-prefix=Squrrel://---
--set-code-block-chars=Squrrel:{}
--set-code-assign-operator=Squrrel:=
#--set-code-prototype-remove=Squrrel:inline
--set-code-listing-tag=Squrrel:lua

# CMake
--add-code-file-extentions=CMake:CMakeLists.txt,.cmake
--set-code-case-sens==CMake:false
--add-code-comment-marker=CMake:#
--add-code-cut-prefix=CMake:#//!
--add-code-cut-prefix=CMake:#//$
--add-code-separator-prefix=CMake:###
--add-code-separator-prefix=CMake:#---
# No blocks support in CMake
# --set-code-block-chars=
--set-code-listing-tag=CMake:cmake

# Txt - plain text as code
--add-code-file-extentions=Txt:.txt,.log
--add-code-cut-prefix=Txt://#!
--add-code-cut-prefix=Txt://#$
--add-code-separator-prefix=Txt://---
--add-code-separator-prefix=Txt:---
# No blocks support in Txt
# --set-code-block-chars=Txt:
# No lang tag for Txt
# --set-code-listing-tag=Txt:txt


## *-list tags

# *-value-style   : normal, bold, italic, bold-italic, italic-bold, backtick and backtick-quote
# *-type          : table, text
# *-title         : pipe separated titles, use ':' for left/right/center align
# *-section-title : section title

--arg-list-value-style=bold
--arg-list-type=text
# --arg-list-type=table
--arg-list-title=:Значение|:Описание
# --arg-list-title=:Value|:Meaning
--arg-list-section-title=Параметры
#--arg-list-section-title=Parameters

--val-list-value-style=bold
--val-list-type=table
--val-list-title=:Значение|:Описание
# --val-list-title=:Value|:Meaning
# --val-list-section-title=

--ret-list-value-style=bold
--ret-list-type=table
--ret-list-title=:Значение|:Описание
# --ret-list-title=:Value|:Meaning
--ret-list-section-title=Возвращаемое значение
# --ret-list-section-title=Return value

--opt-list-value-style=bold
--opt-list-type=text
--opt-list-title=:Опция|:Описание
# --opt-list-title=:Option|:Meaning
--opt-list-section-title=Опции
# --opt-list-section-title=Options

--def-list-value-style=bold
--def-list-type=text
--def-list-title=:Определение|:Описание
# --def-list-title=:Definition|:Meaning
--def-list-section-title=Определения
# --def-list-section-title=Определения

--field-list-value-style=bold
--field-list-type=text
--field-list-title=:Поле|:Описание
# --field-list-title=:Field|:Meaning
--field-list-section-title=Поля
# --field-list-section-title=Fields

--term-list-value-style=bold
--term-list-type=text
--term-list-title=:Термин|:Описание
# --term-list-title=:Term|:Meaning
--term-list-section-title=Термины   
# --term-list-section-title=Terms

# ---list-value-style=
# ---list-type=
# ---list-title=
# ---list-section-title=


# С двумя позициями-ключами вместо одной, типа: Имя (символьное), Значение (числовое), Описание/Name,Value,Meaning
# argList2,argumentList2
# valList2,valueList2
# retList2,returnList2
# optList2,optionList2
# defList2,definitionList2
# fieldList2
# termList2

--val-list2-value-style=bold
--val-list2-type=table
--val-list2-title=:Имя|:Значение|:Описание
# --val-list2-title=:Name|:Value|:Meaning
# --val-list2-section-title=


--set-alert-title=note:Примечание
# --set-alert-title=note:Note
--set-alert-title=tip:Совет
# --set-alert-title=tip:Tip
--set-alert-title=important:Важно
# --set-alert-title=important:Important
--set-alert-title=warning:Предупреждение
# --set-alert-title=warning:Warning
--set-alert-title=caution:Осторожно
# --set-alert-title=caution:Caution



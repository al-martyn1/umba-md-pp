markdown preprocessor

Следует взять dotNut/dn_doc_gen, как базу.

Маркдаун хорош, но можно лучше.
Делаем препроцессор, чтобы было совсем пиздато.

Дауни, дауни, Роберт (Джей/мать твою) Маркдауни (мл). Кому как нравитсо.


1) [X] следует сделать нумерацию разделов.
   Все строки, которые начинаются с # - это заголовки разделов (кроме спец. случаев)
   Штатные средства markdown не всегда умеют или хотят нумеровать разделы при рендеринге, но
   нумерация разделов - довольно удобная фича, поэтому наш препроцессор должен это уметь.

   Нужно уметь пропускать блоки кода, и не обрабатывать '#' в них - в сишечном/плюсовом коде, как минимум
   такие места могут встречаться.

   Нумерация разделов идёт последним пунктом после всего остального

2) [X] Команда insert (или snippet, как в доксигене?).
   Начинается с символов '#$' ('#!') - если не используется препроцессор, то она будет оформлена, как заголовок верхнего уровня,
   что в общем-то, тоже неплохо.

   #$insert{опции} имя_файла_откуда#тэг_или_диапазон_строк
   или
   #!insert ? Знак вопрошения более информативен, если что-то пошло не так?

   Корень каталогов, откуда выкусываем сэмплы, задаётся опцией командной строки, и все файлы в insert задаются
   относительно этого корня. Вопрос, надо ли много корней, или он будет один?

   --set-samples-root
   или
   --add-samples-root
   ?

   Диапазон строк детектится просто - только цифры, и ровно один минус/дефис

   Если 
   #!insert{doc} bla-bla.md
   то поиск идёт только относительно текущего файла?
   Или для insert-doc отдельные пути поиска?

3) [X] Задаём идентификаторы языка (ЯП) в листингах на базе расширений.

   В markdown в листингах можно явно указывать язык программирования, код которого приведён в листинге

   ```cpp
   // Тут какой-то плюсовый код
   ```

   При выкусывании сэмплов автоматом надо задавать тэг языка листинга на основании расширения файла. 
   Добавляем все расширения для плюсиков в базовом .options файле как-то так:

   --add-lang-file-extention=cpp,cpp
   --add-lang-file-extention=cpp,cxx
   --add-lang-file-extention=cpp,c++
   --add-lang-file-extention=cpp,cc
   --add-lang-file-extention=cpp,h
   --add-lang-file-extention=cpp,hpp
   --add-lang-file-extention=cpp,h++

4) [X] Метки в сорцах для выкусывания фрагментов
   У доксигена - тупо парные, но я в dn_doc_gen делал возможность вложенных фрагментов, это имхо удобнее и полезнее.
   Для squirrel (он поддерживает сишные/плюсовые однострочные коменты) это выглядело так:
   //!#МЕТКА
   //!#

   Для плюсов - аналогично должно нормально работать

   При этом, если в выкусываемом фрагменте есть более мелкие помеченные для выкусывания фрагменты, то всё корректно выкусывается,
   а лишние спец-метки внутри могут удалятся, оставляться, как есть, или заменятся на пустые строки

   --set-cut-prefix=cpp,//!#
   --set-cut-prefix=nut,//!#

   Так задаём префиксы фрагментов выкусывания для разных языков.

5) [X] В выходном маркдауни не всегда нужно добавлять суффикс ЯП (```cpp, иногда нужно просто ```)

   Опция инклюда в конкретном кейсе.

6) [X] Опции

   Глобально опции выкуса задаем через командную строку, но можно переопределять их для отдельного выкуса.

   Для конкретного выкуса задаём их переопределение в курли брейсес:

     #!insert{lineno,notrim,notag} имя_файла_откуда#тэг_или_диапазон_строк

   Примеры опций:

     nolineno/lineno       - (не)добавлять номера строк выкусывемого файла. Полезно, когда мы хотим процитировать фрагмент чужого кода
     notrim/trim           - (не)оставить те же отсупы, что и в исходном файле. По умолчанию конечно же аплаится опция trim, но notrim оставлен для извращенцев
     notag/tag             - (не)добавлять тэг языка во вставляемом фрагменте к трем бэктикам листинга
     nofilename/filename   - (не)добавлять имя файла перед листингом
     nopath/path           - (не)указывать полный путь (указанный в команде insert), иначе - указывать только имя файла
     nofail/fail           - если произошел fail с включением стороннего фрагмента, то включаем исходную команду, на которой сйейлились
                             если указано nofail, то исходная команда не включается и ничего не происходит (аналог нового плюсового __if_exist в препроцессоре)

   Командная строка:

     --cut-options=lineno,notrim,notag

   Задаём глобально дефолтные настройки выкусывания.


7) [X] Опции детальнее

   lineno, nolineno - включение/выключение вставки номеров строк в результирующем маркдауни
   trim,notrim,trimleft,notrimleft - выкусываемые фрагменты будут прижиматься к левому краю, или будет использован отступ из оригинального файла с семплами
   tag,notag,langtag,nolangtag - при вставке кода добавляем тэг языка (```cpp vs ```)
   filename,nofilename - перед вставкой фрагмента кода вставлять или не вставлять имя файла, откуда его выкусили. Имя файла будет вставлено, как указано в команде insert/snippet

   Примечание, не относящееся к текущему проекту
   У меня сложилась практика именования переменных, что что-то связанно с номерами я маркирую суффиксами No (от слова номер) - blaBlaNo/всяхерняNo. 
   По аглицки это вроде бы number и д.б. суффикс Nu.
   И я неоднократно был заклёван коллегами по этому и аналогичным поводам.
   Но вот вам шах и мат (chemate, worms) - doxygen \snippet{lineno} - https://www.doxygen.nl/manual/commands.html#cmdsnippet


8) [X] Метки для заголовков

   Doxygen поддерживает нестандартное расширение маркдауна - метки для заголовков.
   На них потом можно ссылаться в тексте типа [бла-бла](#mysuperpupper)

   Выглядит это так:

     # Мой супер-пупер заголовок {#mysuperpupper}

   У нас есть тема, что каждый заголовок мы помечаем тэгом (как в стандарте C++ примерно) в квадратных скобках.

   При генерации маркдауна для доксигена мы можем делать немного найса:

    - если строка заголовка заканчивается на '}' - ничего не делаем ваще, какой-то идентификатор уже втюрен
    - если строка заголовка заканчивается на ']' - это наша система тэгов, генерим соответствующий доксмгеновский тэг {#}
    - если в заголовке нет никаких маркеров, то тут могут быть варианты:
      + ничего не генерить
      + генерить какой-то хэш
      + генерить транслит-метку
      + самый простой варик - ничего не генерить )

   GitHub (ПшеРги)
   https://gist.github.com/asabaylus/3071099?permalink_comment_id=3366191
   So, characters like á,é,í,ó,ú,Á,É,Í,Ó,Ú,Ñ,ñ are just omitted in anchors.
   #Definición (note the Spanish accent in the "o")
   [Ir a definición](#definicin)


9) Support for GitHub Alerts
https://www.doxygen.nl/manual/markdown.html#mddox_github_alerts
https://docs.github.com/ru/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#alerts


In the GitHub version of markdown there is the support for so called alerts, the syntax is similar to a one level block quote followied by [!<alert>] where <alert> can be one of note, warning, tip, caution or important. In doxygen these alerts are translated into normal doxygen commands:

    > [!note] is translated to \note
    > [!warning] is translated to \warning
    > [!tip] is translated to \remark
    > [!caution] is translated to \attention
    > [!important] is translated to \important

Example:
> [!note]
> The special text for the note

    Собственно, тут особо ничего делать не надо, это прост памятка, что у гитхаб-маркдауна есть расширение, аналогичное доксигеновскому, 
    и можно это использовать и туда и туда. А больше пока никуда и не нужно.


10) [X] Коментарии
#// однострочный
#/* бла-бла
#*/
бла-бла #*/

Или многострочные не нужны?


11) Метаданные

    https://stackoverflow.com/questions/44215896/markdown-metadata-format
    https://jekyllrb.com/docs/front-matter/

    YAML metadata in Markdown - https://peterbabic.dev/blog/yaml-metadata-in-markdown/
    category, tags, slug, time or title

    https://fletcher.github.io/MultiMarkdown-5/metadata.html

    https://github.blog/2013-09-27-viewing-yaml-metadata-in-your-documents/

    GitHub Markup - https://github.com/github/markup
      https://github.com/github/markup?tab=readme-ov-file#markups
      https://github.com/github-linguist/linguist#syntax-highlighting

    https://python-markdown.github.io/extensions/meta_data/

12) Обработка метаданных
    1) Метадата всегда коллектится
       Метадата всегда обрезается, но если задано no-strip-metadata, то сколлекционированная метадата сериализуется.
       --processing-options=strip-metadata, --processing-options=no-strip-metadata
    2) Некоторые тэги - это списки, такие, как author
       Русское "Автор" транслитерируется в Avtor, надо уметь заменять на Autor, 
       чтобы можно было задавать тэги на русском.
    3) Надо обумать, как всё это разбирать

       --meta-tag-replace=avtor:author
       --meta-tag-serialize=author:Author

13) Генераторы сайтов на маркдауне

Transform your plain text into static websites and blogs - http://jekyllrb.com/
GitHub Pages. Websites for you and your projects - https://pages.github.com/

VSCode - https://github.com/mjbvz/vscode-github-markdown-preview

    Просто заметка


14) Опция --batch, позволяющая сканировать и обрабатывать пачки документов в пакетном режиме
    Сюда же include/exclude маски

    Пока не буду, лень, и не особо вроде надо.


15) Настройки храним также в корне проекта в файле .md-pp-config или .md-pp-options.
    Это обычные .options файл, по строчке на опцию.
    Корень проекта там, где лежит .md-pp-config.
    Для безопасности #!insert можно ограничивать только текущим проектом, запрет выходить за пределы корня


16) umba-md-pp-view - тулза, генерящая проект для доксигена, вызывающая его, затем открывающая сгенеренный файл.
    Временные файлы в %TEMP%\.umba-md-pp-view\$(FilenameHash)\
    Желательно открывать так, чтобы Word не лочил файл, но может не получится. Ну, или убивать может получится тот ворд, 
    в котором открыт текущий документ.

    Doxygen можно поискать тут:
    Компьютер\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\doxygen_is1
    "Inno Setup: App Path"
    "InstallLocation"

    a0) [X] Генерим документ
    а1) [X] Генерим конфиг доксигена
        [X] Добавляем в конфиг имя отображаемого файла
        [X] Добавляем ссылку на доп RTF конфиг
    б) [X] Генерим доп конфиг для RTF
    в) [X] Создаём каталог в %TEMP% с именем как хэш от полного имени входного файла
    г) Сохраняем туда конфиги
    д) Извлекаем из реестра полный путь к EXE-шнику доксигена
       Если не получилось, то используем просто doxygen.exe
    е) При помощи system запускаем doxygen.
    ж) находим сгенерённый refman.rtf
    з) Ищем окно, в котором в заголовке есть имя файла документа, закрываем его
    и) Переименовываем полученный refman.rtf
    к) ShellExecute("view"/"open")
    л) Надо сделать регистрацию в реестре обработчика расширения.
       Создание обработчиков расширений оболочки - https://www.google.com/search?q=windows+%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D0%B8+%D1%80%D0%B0%D1%81%D1%88%D0%B8%D1%80%D0%B5%D0%BD%D0%B8%D0%B9+%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2
       тоже самое? - https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://learn.microsoft.com/ru-ru/windows/win32/shell/handlers&ved=2ahUKEwjx2bLToe-FAxXNJBAIHSnVALMQFnoECA8QAQ&usg=AOvVaw16gsFZUqa5Gh7iJHtBykwS
       Указание обработчиков файлов для расширений имен файлов - https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://learn.microsoft.com/ru-ru/visualstudio/extensibility/specifying-file-handlers-for-file-name-extensions%3Fview%3Dvs-2022&ved=2ahUKEwjx2bLToe-FAxXNJBAIHSnVALMQFnoECBEQAQ&usg=AOvVaw2ZE_DlYUBsscfUesWZ7-nc
       HKEY_CURRENT_USER\Software\Classes содержит параметры, которые применяются только к интерактивному пользователю

       https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://learn.microsoft.com/ru-ru/windows/win32/shell/handlers&ved=2ahUKEwjx2bLToe-FAxXNJBAIHSnVALMQFnoECA8QAQ&usg=AOvVaw16gsFZUqa5Gh7iJHtBykwS
       https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://learn.microsoft.com/ru-ru/visualstudio/extensibility/specifying-file-handlers-for-file-name-extensions%3Fview%3Dvs-2022&ved=2ahUKEwjx2bLToe-FAxXNJBAIHSnVALMQFnoECBEQAQ&usg=AOvVaw2ZE_DlYUBsscfUesWZ7-nc

       Компьютер\HKEY_CLASSES_ROOT\md__auto_file
           shell
             open
               command
                 default value: "F:\_github\umba-tools\umba-md-pp\.out\msvc2019\x86\Debug\umba-md-pp-view.exe" "%1"

       HKEY_CLASSES_ROOT\.md_
           default value md__auto_file

       The nameless key is the default one - https://learn.microsoft.com/en-us/dotnet/api/microsoft.win32.registry.setvalue?view=net-8.0&redirectedfrom=MSDN#overloads

17) [X] TOC - Table Of Content и ссылки на разделы.
    Самое хорошее правило - не ссылаться на разделы вообще, потому что разные системы могут генерить идентификаторы по-разному,
    мы не можем на это повлиять. В Doxygen'е есть возможность задавать ID раздела, а на GitHub'е - такой возможности нет.
    Надо проверить, потянет ли Doxygen ссылки на русском, согласно правилам гитхаба. Если потянет - то сделать одинаковые правила.
    Хотя, не получится - на гитхабе, если делаем нумерацию, то номер раздела попадает в ID, а это плохо.
    В общем, лучше совсем не ссылаться на разделы. Генерация идентификаторов нужна только для генерации TOC.

    Идея по ссылкам на разделы. Указываем в них просто текст заголовка - [Какой-то текст](#Просто полный текст заголовка)
    Также для каждого заголовка можно задать частично или полностью квалифицированную ссылку. Потом распарсим текст на предмет 
    ссылок и сделаем замену.

    В теле текста линка можно задать просто [$] - тогда будет вставлен текст заголовка, если задать [#] - тогда будет вставлен 
    только номер заголовка, если есть нумерация, или его текст, если нумерации нет, [#$] - номер и текст заголовка, если есть нумерация,
    или только текст, если нумерации нет.

18) Разное по маркдауну
    https://commonmark.org/
    саппорт гитхаба - https://support.github.com/

    readthedocs.io - https://about.readthedocs.com/?ref=readthedocs.org

    GitHub Pages - https://docs.github.com/ru/pages/quickstart
    Управление параметрами GitHub Actions для репозитория - https://docs.github.com/ru/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository
    Creating a GitHub Pages site with Jekyll - https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll
    Adding a theme to your GitHub Pages site using Jekyll - https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll
    Supported themes - https://pages.github.com/themes/
      https://pages-themes.github.io/architect/
      https://pages-themes.github.io/cayman/
      https://github.com/pages-themes/dinky
      https://github.com/pages-themes/leap-day
      https://jekyll.github.io/minima/
      https://pages-themes.github.io/minimal/
      https://pages-themes.github.io/modernist/
      https://github.com/pages-themes/slate
      https://github.com/pages-themes/tactile


    About content in Jekyll sites - https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/adding-content-to-your-github-pages-site-using-jekyll#about-content-in-jekyll-sites
    About GitHub Pages and Jekyll - https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll
    Static site generators - https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#static-site-generators

    About large files on GitHub - https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#file-and-repository-size-limitations
    Distributing large binaries - https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#distributing-large-binaries
    About releases - https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases
    Managing releases in a repository - https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository


19) Разное по доксигену
    Doxygen Awesome is a custom CSS theme for Doxygen HTML documentation with lots of customization parameters - https://jothepro.github.io/doxygen-awesome-css/
    Mastering Doxygen - https://exhale.readthedocs.io/en/latest/mastering_doxygen.html

    Интересная идея - doxygen'овский XML конвертить в маркдаун, чтобы можно было выкладывать на GitHub Pages.


20) Про шрифты
    ConEmu при создании шрифта парсит его имя, если находит [RasterFont MxN], то размер берет оттуда, а имя шрифта (FontFace) использует "Terminal".
    "Terminal". Или, если FF задан "Terminal", и charset OEM, то ConEmu переходит в режим bRasterFont = true;
    В настройках ConEmu есть шрифт с именем "Terminal". Но в винде такого шрифта нет.

    Сорцы ConEmu - https://github.com/Maximus5/ConEmu/releases

    Установленные шрифты - HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts

    https://www.google.com/search?q=windows+terminal+font
        Windows Terminal ships Cascadia Code and Cascadia Mono in its package and uses Cascadia Mono by default - https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://learn.microsoft.com/en-us/windows/terminal/cascadia-code&ved=2ahUKEwiKgpbX3_2FAxXnJxAIHaEOBUgQFnoECA0QAw&usg=AOvVaw0pA1bKpMDdSb1doq97TK2V
        https://github.com/microsoft/cascadia-code
    https://www.google.com/search?q=windows+font+face+Terminal

    Какие-то BDF шрифты для винды (но винда не открывает их) - https://www.majorgeeks.com/files/details/raster_fonts_for_windows.html

    Тут пишут, как создать растровый шрифт в GDI - https://stackoverflow.com/questions/52573992/how-to-draw-raster-console-fonts-in-gdi

    Google Fonts - https://fonts.google.com/

    Raster, Vector, TrueType, and OpenType Fonts - Win32 apps - https://learn.microsoft.com/en-us/windows/win32/gdi/raster--vector--truetype--and-opentype-fonts

    Why are console windows limited to Lucida Console and raster fonts? - https://devblogs.microsoft.com/oldnewthing/20070516-00/?p=26843


21) На тему стандарта кодирования

    _DECLARE_ _IMPLEMENT_
    Иногда какая-то часть кода оборачивается в макрос, тупо потому что надо размножить чисто текстуально во многих местах.
    Например, это набор typedef/using'ов для контейнера, мимикрирующего под стандартный контейнер.

    Общее правило для макросов, префикс:
      - создается из имени пространства имён, для которого применяется, затем идёт уже конкретное имя, для всего, что связано с namespace
        marty_cpp, макросы имеют вид MARTY_CPP_BLA_BLA - MARTY_CPP_ENUM_SERIALIZE_BEGIN
      - по относительному пути включения файла/файлов, к которым он относится
        есть сишечно-стайл include "os/dirivers/bla-bla.h" и там куча таких же файлов. Тогда макросы, которые там определяются, следует называть
        OS_DRIVERS_BLA_BLA
      - по хорошему, все, что относится к библиотекам конкретного проекта/фреймворка/организации, должно лежать в одном месте/каталоге с именем
        myproject|myframework|myorganization/bla-bla.
      - другой вариант, когда много разных библиотек, и они не всегда взаимосвязаны и могут вообще не пересекаться, и существовать не в монорепе, 
        а в разных репозиториях или других хранилищах библиотек - тут можно префикс проекта делать вида myproject_mylib

    Префикс макроса должен начинаться с префикса либы.

    Далее. Если это кодогенерирующий макрос - добавляем к его имени _DECLARE_ или _IMPLEMENT_. Затем добавляем уже описание того, что делает данный макрос.

    В итоге, у нас будут макросы, которые в середине имени содержат строки _DECLARE_ или _IMPLEMENT_. Такие макросы легко отыскать, сделать их список без 
    повторений, и подсунуть этот спискок доксигену для раскрытия.

    Проблема с такими кодогенерирующими макросами в том, что среды разработки не покажут, что получается в результате его использования.
    А генератор документации типа doxygen или qdoc раскроет их, и создаст внятную документацию.

    Лютая дичь, трэш и угар - про то, как иногда организованы проекты.


22) Разное

    https://github.com/VKCOM/kphp/commits/master/

    табы vs пробелы - GCC считает таб за 9 пробелов и выдаёт варнинги - https://stackoverflow.com/questions/50318900/why-is-gcc-warning-me-this-line-is-misleadingly-indented-as-if-it-were-guarded

